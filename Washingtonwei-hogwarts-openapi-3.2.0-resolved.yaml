openapi: 3.1.0
info:
  title: Hogwarts Artifacts Online
  description: |
    Hogwarts Artifacts Online provides REST API to CRUD artifacts, wizards, and users.
  termsOfService: http://swagger.io/terms/
  contact:
    name: Bingyang Wei
    email: b.wei@tcu.edu
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 3.2.0
servers:
- url: https://hogwarts-artifacts-online.azurewebsites.net/api/v1
  description: Development server
tags:
- name: artifact
  description: Endpoints related to Hogwarts artifacts
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: wizard
  description: Endpoints related to Hogwarts wizards
- name: user
  description: Endpoints related to Hogwarts users
paths:
  /artifacts:
    get:
      tags:
      - artifact
      summary: Find artifacts with pagination
      description: Return a paginated list of artifacts based on the page number (page) and the number of items per page (size). Also support sorting the paginated list.
      operationId: findAllArtifacts
      parameters:
      - name: page
        in: query
        description: Page number
        required: false
        schema:
          type: integer
        examples:
          page:
            value: 2
      - name: size
        in: query
        description: Number of items in a single page
        required: false
        schema:
          type: integer
        examples:
          size:
            value: 2
      - name: sort
        in: query
        description: Sorting information
        required: false
        schema:
          type: string
        examples:
          sortAsc:
            value: "name,asc"
          sortDesc:
            value: "name,desc"
          sortDescIgnoreCase:
            value: "name,desc,ignorecase"
          sortMultiple:
            value: "id,name"
      responses:
        "200":
          description: A page of artifacts found and returned
          content:
            application/json:
              schema:
                title: API response for find all artifacts
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    examples:
                    - Find All Success
                  data:
                    title: Artifact page
                    description: A page of artifacts
                    type: object
                    properties:
                      content:
                        title: Content
                        description: ""
                        type: array
                        items:
                          title: Artifact
                          description: An artifact
                          type: object
                          properties:
                            id:
                              title: Id
                              description: Id of the artifact
                              type: string
                              example: "1250808601744904191"
                              readOnly: true
                            name:
                              title: Artifact name
                              description: Name of the artifact
                              type: string
                              example: Deluminator
                            description:
                              title: Artifact description
                              description: Description of the artifact
                              type: string
                              example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
                            imageUrl:
                              title: Artifact image url
                              description: Url of the image of the artifact
                              type: string
                              example: ImageUrl
                            owner:
                              allOf:
                              - title: Wizard
                                description: A wizard
                                type: object
                                properties:
                                  id:
                                    title: Id
                                    description: Id of the wizard
                                    type: integer
                                    minimum: 1
                                    example: 2
                                    readOnly: true
                                  name:
                                    title: Wizard name
                                    description: Name of the wizard
                                    type: string
                                    example: Harry Potter
                                  numberOfArtifacts:
                                    title: Number of artifacts
                                    description: Number of artifacts owned by the wizard
                                    type: integer
                                    example: 2
                                    readOnly: true
                                required:
                                - id
                                - name
                              - example:
                                  id: 1
                                  name: Albus Dumbledore
                                  numberOfArtifacts: 2
                              - readOnly: true
                          required:
                          - id
                          - name
                          - description
                          - imageUrl
                        example:
                        - id: "1250808601744904194"
                          name: The Marauder's Map
                          description: "A magical map of Hogwarts created by Remus Lupin, Peter Pettigrew, Sirius Black, and James Potter while they were students at Hogwarts."
                          imageUrl: ImageUrl
                          owner:
                            id: 2
                            name: Harry Potter
                            numberOfArtifacts: 2
                        - id: "1250808601744904195"
                          name: The Sword Of Gryffindor
                          description: "A goblin-made sword adorned with large rubies on the pommel. It was once owned by Godric Gryffindor, one of the medieval founders of Hogwarts."
                          imageUrl: ImageUrl
                          owner:
                            id: 3
                            name: Neville Longbottom
                            numberOfArtifacts: 1
                      pageable:
                        title: Pageable
                        description: Information about the pagination
                        type: object
                        properties:
                          pageNumber:
                            type: integer
                            example: 2
                          pageSize:
                            type: integer
                            example: 2
                          sort:
                            type: object
                            properties:
                              empty:
                                type: boolean
                                example: false
                              sorted:
                                type: boolean
                                example: true
                              unsorted:
                                type: boolean
                                example: false
                          offset:
                            type: integer
                            example: 4
                          paged:
                            type: boolean
                            example: true
                          unpaged:
                            type: boolean
                            example: false
                      totalPages:
                        title: Total pages
                        description: Total number of pages
                        type: integer
                        example: 3
                      totalElements:
                        title: Total elements
                        description: Total number of artifacts in the database
                        type: integer
                        example: 6
                      last:
                        title: Last
                        description: Is this the last page?
                        type: boolean
                        example: true
                      size:
                        title: Size
                        description: Number of artifacts per page
                        type: integer
                        example: 2
                      number:
                        title: Number
                        description: Page number
                        type: integer
                        example: 2
                      sort:
                        title: Sort
                        description: Sorting params
                        type: object
                        properties:
                          empty:
                            type: boolean
                            example: false
                          sorted:
                            type: boolean
                            example: true
                          unsorted:
                            type: boolean
                            example: false
                      numberOfElements:
                        title: NumberOfElements
                        description: Number of artifacts per page
                        type: integer
                        example: 2
                      first:
                        title: First
                        description: Is this the first page?
                        type: boolean
                        example: false
                      empty:
                        title: Empty
                        description: Is the page empty?
                        type: boolean
                        example: false
      security: []
    post:
      tags:
      - artifact
      summary: Add an artifact
      description: Add a new artifact and return the saved one.
      operationId: addArtifact
      requestBody:
        description: The new artifact
        content:
          application/json:
            schema:
              allOf:
              - title: Artifact
                description: An artifact
                type: object
                properties:
                  id:
                    title: Id
                    description: Id of the artifact
                    type: string
                    example: "1250808601744904191"
                    readOnly: true
                  name:
                    title: Artifact name
                    description: Name of the artifact
                    type: string
                    example: Deluminator
                  description:
                    title: Artifact description
                    description: Description of the artifact
                    type: string
                    example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
                  imageUrl:
                    title: Artifact image url
                    description: Url of the image of the artifact
                    type: string
                    example: ImageUrl
                  owner:
                    allOf:
                    - title: Wizard
                      description: A wizard
                      type: object
                      properties:
                        id:
                          title: Id
                          description: Id of the wizard
                          type: integer
                          minimum: 1
                          example: 2
                          readOnly: true
                        name:
                          title: Wizard name
                          description: Name of the wizard
                          type: string
                          example: Harry Potter
                        numberOfArtifacts:
                          title: Number of artifacts
                          description: Number of artifacts owned by the wizard
                          type: integer
                          example: 2
                          readOnly: true
                      required:
                      - id
                      - name
                    - example:
                        id: 1
                        name: Albus Dumbledore
                        numberOfArtifacts: 2
                    - readOnly: true
                required:
                - id
                - name
                - description
                - imageUrl
            examples:
              Remembrall:
                value:
                  name: Remembrall
                  description: A Remembrall was a magical large marble-sized glass ball that contained smoke which turned red when its owner or user had forgotten something. It turned clear once whatever was forgotten was remembered.
                  imageUrl: https://hogwartsartifactsonline.blob.core.windows.net/artifact-image-container/remembrall.jpg
        required: true
      responses:
        "200":
          description: Artifact added and returned
          content:
            application/json:
              schema:
                title: API response for add artifact
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    description: Return code
                    example: 200
                  message:
                    type: string
                    example: Add Success
                  data:
                    allOf:
                    - title: Artifact
                      description: An artifact
                      type: object
                      properties:
                        id:
                          title: Id
                          description: Id of the artifact
                          type: string
                          example: "1250808601744904191"
                          readOnly: true
                        name:
                          title: Artifact name
                          description: Name of the artifact
                          type: string
                          example: Deluminator
                        description:
                          title: Artifact description
                          description: Description of the artifact
                          type: string
                          example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
                        imageUrl:
                          title: Artifact image url
                          description: Url of the image of the artifact
                          type: string
                          example: ImageUrl
                        owner:
                          allOf:
                          - title: Wizard
                            description: A wizard
                            type: object
                            properties:
                              id:
                                title: Id
                                description: Id of the wizard
                                type: integer
                                minimum: 1
                                example: 2
                                readOnly: true
                              name:
                                title: Wizard name
                                description: Name of the wizard
                                type: string
                                example: Harry Potter
                              numberOfArtifacts:
                                title: Number of artifacts
                                description: Number of artifacts owned by the wizard
                                type: integer
                                example: 2
                                readOnly: true
                            required:
                            - id
                            - name
                          - example:
                              id: 1
                              name: Albus Dumbledore
                              numberOfArtifacts: 2
                          - readOnly: true
                      required:
                      - id
                      - name
                      - description
                      - imageUrl
                    example:
                      id: "1250808601744904197"
                      name: Remembrall
                      description: A Remembrall was a magical large marble-sized glass ball that contained smoke which turned red when its owner or user had forgotten something. It turned clear once whatever was forgotten was remembered.
                      imageUrl: https://hogwartsartifactsonline.blob.core.windows.net/artifact-image-container/remembrall.jpg
                      owner: null
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                title: API response for bad request error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 400
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: "Provided arguments are invalid, see data for details."
                    readOnly: true
                  data:
                    title: Artifact bad request
                    description: Messages describing a bad request error
                    type: object
                    properties:
                      name:
                        title: Name of the artifact
                        description: The error message
                        type: string
                        example: name is required.
                      description:
                        title: Description of the artifact
                        description: The error message
                        type: string
                        example: description is required.
                      imageUrl:
                        title: Image url of the artifact
                        description: The error message
                        type: string
                        example: imageUrl is required.
  /artifacts/{artifactId}:
    get:
      tags:
      - artifact
      summary: Find an artifact by Id
      description: Find a single artifact and return it.
      operationId: findArtifactById
      parameters:
      - name: artifactId
        in: path
        description: Id of artifact to return
        required: true
        schema:
          type: string
        examples:
          artifactIdExample:
            value: "1250808601744904192"
      responses:
        "200":
          description: Artifact found and returned
          content:
            application/json:
              schema:
                title: API response for find one artifact
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Find One Success
                  data:
                    allOf:
                    - title: Artifact
                      description: An artifact
                      type: object
                      properties:
                        id:
                          title: Id
                          description: Id of the artifact
                          type: string
                          example: "1250808601744904191"
                          readOnly: true
                        name:
                          title: Artifact name
                          description: Name of the artifact
                          type: string
                          example: Deluminator
                        description:
                          title: Artifact description
                          description: Description of the artifact
                          type: string
                          example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
                        imageUrl:
                          title: Artifact image url
                          description: Url of the image of the artifact
                          type: string
                          example: ImageUrl
                        owner:
                          allOf:
                          - title: Wizard
                            description: A wizard
                            type: object
                            properties:
                              id:
                                title: Id
                                description: Id of the wizard
                                type: integer
                                minimum: 1
                                example: 2
                                readOnly: true
                              name:
                                title: Wizard name
                                description: Name of the wizard
                                type: string
                                example: Harry Potter
                              numberOfArtifacts:
                                title: Number of artifacts
                                description: Number of artifacts owned by the wizard
                                type: integer
                                example: 2
                                readOnly: true
                            required:
                            - id
                            - name
                          - example:
                              id: 1
                              name: Albus Dumbledore
                              numberOfArtifacts: 2
                          - readOnly: true
                      required:
                      - id
                      - name
                      - description
                      - imageUrl
                    example:
                      id: "1250808601744904192"
                      name: Invisibility Cloak
                      description: An invisibility cloak is used to make the wearer invisible.
                      imageUrl: ImageUrl
                      owner:
                        id: 2
                        name: Harry Potter
                        numberOfArtifacts: 2
        "404":
          description: Artifact not found
          content:
            application/json:
              schema:
                title: API response for not found error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 404
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: Could not find artifact with Id 1250808601744904199 :(
                    readOnly: true
                  data:
                    type: object
                    example: null
      security: []
    put:
      tags:
      - artifact
      summary: Update an artifact
      description: Update an exisiting artifact and return the updated one.
      operationId: updateArtifact
      parameters:
      - name: artifactId
        in: path
        description: Id of artifact to update
        required: true
        schema:
          type: string
        examples:
          artifactIdExample:
            value: "1250808601744904191"
      requestBody:
        description: The artifact with updated info
        content:
          application/json:
            schema:
              allOf:
              - title: Artifact
                description: An artifact
                type: object
                properties:
                  id:
                    title: Id
                    description: Id of the artifact
                    type: string
                    example: "1250808601744904191"
                    readOnly: true
                  name:
                    title: Artifact name
                    description: Name of the artifact
                    type: string
                    example: Deluminator
                  description:
                    title: Artifact description
                    description: Description of the artifact
                    type: string
                    example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
                  imageUrl:
                    title: Artifact image url
                    description: Url of the image of the artifact
                    type: string
                    example: ImageUrl
                  owner:
                    allOf:
                    - title: Wizard
                      description: A wizard
                      type: object
                      properties:
                        id:
                          title: Id
                          description: Id of the wizard
                          type: integer
                          minimum: 1
                          example: 2
                          readOnly: true
                        name:
                          title: Wizard name
                          description: Name of the wizard
                          type: string
                          example: Harry Potter
                        numberOfArtifacts:
                          title: Number of artifacts
                          description: Number of artifacts owned by the wizard
                          type: integer
                          example: 2
                          readOnly: true
                      required:
                      - id
                      - name
                    - example:
                        id: 1
                        name: Albus Dumbledore
                        numberOfArtifacts: 2
                    - readOnly: true
                required:
                - id
                - name
                - description
                - imageUrl
            examples:
              Deluminator:
                value:
                  name: Deluminator-update
                  description: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.-update
                  imageUrl: ImageUrl-update
        required: true
      responses:
        "200":
          description: Artifact updated and returned
          content:
            application/json:
              schema:
                title: API response for update artifact
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    description: Return code
                    example: 200
                  message:
                    type: string
                    example: Update Success
                  data:
                    allOf:
                    - title: Artifact
                      description: An artifact
                      type: object
                      properties:
                        id:
                          title: Id
                          description: Id of the artifact
                          type: string
                          example: "1250808601744904191"
                          readOnly: true
                        name:
                          title: Artifact name
                          description: Name of the artifact
                          type: string
                          example: Deluminator
                        description:
                          title: Artifact description
                          description: Description of the artifact
                          type: string
                          example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
                        imageUrl:
                          title: Artifact image url
                          description: Url of the image of the artifact
                          type: string
                          example: ImageUrl
                        owner:
                          allOf:
                          - title: Wizard
                            description: A wizard
                            type: object
                            properties:
                              id:
                                title: Id
                                description: Id of the wizard
                                type: integer
                                minimum: 1
                                example: 2
                                readOnly: true
                              name:
                                title: Wizard name
                                description: Name of the wizard
                                type: string
                                example: Harry Potter
                              numberOfArtifacts:
                                title: Number of artifacts
                                description: Number of artifacts owned by the wizard
                                type: integer
                                example: 2
                                readOnly: true
                            required:
                            - id
                            - name
                          - example:
                              id: 1
                              name: Albus Dumbledore
                              numberOfArtifacts: 2
                          - readOnly: true
                      required:
                      - id
                      - name
                      - description
                      - imageUrl
                    example:
                      id: "1250808601744904191"
                      name: Deluminator-update
                      description: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.-update
                      imageUrl: ImageUrl-update
                      owner:
                        id: 1
                        name: Albus Dumbledore
                        numberOfArtifacts: 2
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                title: API response for bad request error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 400
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: "Provided arguments are invalid, see data for details."
                    readOnly: true
                  data:
                    title: Artifact bad request
                    description: Messages describing a bad request error
                    type: object
                    properties:
                      name:
                        title: Name of the artifact
                        description: The error message
                        type: string
                        example: name is required.
                      description:
                        title: Description of the artifact
                        description: The error message
                        type: string
                        example: description is required.
                      imageUrl:
                        title: Image url of the artifact
                        description: The error message
                        type: string
                        example: imageUrl is required.
        "404":
          description: Artifact not found
          content:
            application/json:
              schema:
                title: API response for not found error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 404
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: Could not find artifact with Id 1250808601744904199 :(
                    readOnly: true
                  data:
                    type: object
                    example: null
    delete:
      tags:
      - artifact
      summary: Delete an artifact
      description: Delete a single artifact.
      operationId: deleteArtifact
      parameters:
      - name: artifactId
        in: path
        description: Id of artifact to delete
        required: true
        schema:
          type: string
        examples:
          artifactIdExample:
            value: "1250808601744904191"
      responses:
        "200":
          description: Artifact deleted
          content:
            application/json:
              schema:
                title: API response for delete
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    description: Return code
                    example: 200
                  message:
                    type: string
                    example: Delete Success
                  data:
                    type: object
                    example: null
        "404":
          description: Artifact not found
          content:
            application/json:
              schema:
                title: API response for not found error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 404
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: Could not find artifact with Id 1250808601744904199 :(
                    readOnly: true
                  data:
                    type: object
                    example: null
  /artifacts/summary:
    get:
      tags:
      - artifact
      summary: Summarize the existing artifacts
      description: Generate a summary of the existing artifacts and return it.
      operationId: summarizeArtifacts
      responses:
        "200":
          description: Summary generated and returned
          content:
            application/json:
              schema:
                title: API response for summarize artifacts
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Summarize Success
                  data:
                    type: string
                    example: "The collection comprises six magical artifacts. Albus Dumbledore owns the Deluminator, a device to manipulate light, and the Elder Wand, a powerful wand made with Thestral tail hair. Harry Potter possesses the Invisibility Cloak that turns the wearer invisible and the Marauder's Map, a magical blueprint of Hogwarts. The Sword of Gryffindor, a goblin-made sword adorned with rubies, belongs to Neville Longbottom. The Resurrection Stone, able to bring back and communicate with deceased loved ones, lacks a specified owner."
        "401":
          description: API key error
          content:
            application/json:
              schema:
                title: API response for API key error
                description: The schema for API key error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    readOnly: true
                  data:
                    type: string
              examples:
                IncorrectAPIKey:
                  value:
                    flag: false
                    code: 401
                    message: "A rest client error occurs, see data for details."
                    data: "Incorrect API key provided: bw-AbcdE**************************************OKJY. You can find your API key at https://platform.openai.com/account/api-keys."
                  summary: Incorrect API key provided
                APIKeyNotProvided:
                  value:
                    flag: false
                    code: 401
                    message: "A rest client error occurs, see data for details."
                    data: "You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys."
                  summary: API key not provided
        "429":
          description: Curent quota exceeded
          content:
            application/json:
              schema:
                title: API response for quota exceeded
                description: The schema for quota exceeded error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 429
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: "A rest client error occurs, see data for details."
                    readOnly: true
                  data:
                    type: string
                    example: "You exceeded your current quota, please check your plan and billing details."
        "500":
          description: OpenAI server error
          content:
            application/json:
              schema:
                title: API response for OpenAI server error
                description: The schema for OpenAI server error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 500
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: "A rest client error occurs, see data for details."
                    readOnly: true
                  data:
                    type: string
                    example: The server had an error while processing your request.
        "503":
          description: OpenAI server overloaded
          content:
            application/json:
              schema:
                title: API response for OpenAI server overloaded error
                description: The schema for OpenAI server overloaded error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 503
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: "A rest client error occurs, see data for details."
                    readOnly: true
                  data:
                    type: string
                    example: "The engine is currently overloaded, please try again later."
      security: []
  /artifacts/search:
    post:
      tags:
      - artifact
      summary: Find artifacts by search criteria
      description: Return a page of artifacts that match the search criteria.
      operationId: searchArtifacts
      parameters:
      - name: page
        in: query
        description: Page number
        required: false
        schema:
          type: integer
        examples:
          page:
            value: 0
      - name: size
        in: query
        description: Number of items in a single page
        required: false
        schema:
          type: integer
        examples:
          size:
            value: 2
      - name: sort
        in: query
        description: Sorting information
        required: false
        schema:
          type: string
        examples:
          sortAsc:
            value: "name,asc"
          sortDesc:
            value: "name,desc"
      requestBody:
        description: Search criteria
        content:
          application/json:
            examples:
              Description only:
                value:
                  description: Hogwarts
              Name and description:
                value:
                  name: Sword
                  description: Hogwarts
              Id, name, and description:
                value:
                  id: "1250808601744904195"
                  name: Sword
                  description: Hogwarts
        required: true
      responses:
        "200":
          description: A page of matching artifacts found and returned
          content:
            application/json:
              schema:
                title: API response for search artifacts
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    examples:
                    - Search Success
                  data:
                    title: Search artifact page
                    description: A page of artifacts
                    type: object
                    properties:
                      content:
                        title: Content
                        description: ""
                        type: array
                        items:
                          title: Artifact
                          description: An artifact
                          type: object
                          properties:
                            id:
                              title: Id
                              description: Id of the artifact
                              type: string
                              example: "1250808601744904191"
                              readOnly: true
                            name:
                              title: Artifact name
                              description: Name of the artifact
                              type: string
                              example: Deluminator
                            description:
                              title: Artifact description
                              description: Description of the artifact
                              type: string
                              example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
                            imageUrl:
                              title: Artifact image url
                              description: Url of the image of the artifact
                              type: string
                              example: ImageUrl
                            owner:
                              allOf:
                              - title: Wizard
                                description: A wizard
                                type: object
                                properties:
                                  id:
                                    title: Id
                                    description: Id of the wizard
                                    type: integer
                                    minimum: 1
                                    example: 2
                                    readOnly: true
                                  name:
                                    title: Wizard name
                                    description: Name of the wizard
                                    type: string
                                    example: Harry Potter
                                  numberOfArtifacts:
                                    title: Number of artifacts
                                    description: Number of artifacts owned by the wizard
                                    type: integer
                                    example: 2
                                    readOnly: true
                                required:
                                - id
                                - name
                              - example:
                                  id: 1
                                  name: Albus Dumbledore
                                  numberOfArtifacts: 2
                              - readOnly: true
                          required:
                          - id
                          - name
                          - description
                          - imageUrl
                        example:
                        - id: "1250808601744904194"
                          name: The Marauder's Map
                          description: "A magical map of Hogwarts created by Remus Lupin, Peter Pettigrew, Sirius Black, and James Potter while they were students at Hogwarts."
                          imageUrl: ImageUrl
                          owner:
                            id: 2
                            name: Harry Potter
                            numberOfArtifacts: 2
                        - id: "1250808601744904195"
                          name: The Sword Of Gryffindor
                          description: "A goblin-made sword adorned with large rubies on the pommel. It was once owned by Godric Gryffindor, one of the medieval founders of Hogwarts."
                          imageUrl: ImageUrl
                          owner:
                            id: 3
                            name: Neville Longbottom
                            numberOfArtifacts: 1
                      pageable:
                        title: Pageable
                        description: Information about the pagination
                        type: object
                        properties:
                          pageNumber:
                            type: integer
                            example: 0
                          pageSize:
                            type: integer
                            example: 2
                          sort:
                            type: object
                            properties:
                              empty:
                                type: boolean
                                example: false
                              sorted:
                                type: boolean
                                example: true
                              unsorted:
                                type: boolean
                                example: false
                          offset:
                            type: integer
                            example: 0
                          paged:
                            type: boolean
                            example: true
                          unpaged:
                            type: boolean
                            example: false
                      totalPages:
                        title: Total pages
                        description: Total number of pages
                        type: integer
                        example: 1
                      totalElements:
                        title: Total elements
                        description: Total number of artifacts matching search criteria
                        type: integer
                        example: 2
                      last:
                        title: Last
                        description: Is this the last page?
                        type: boolean
                        example: true
                      size:
                        title: Size
                        description: Number of artifacts per page
                        type: integer
                        example: 2
                      number:
                        title: Number
                        description: Page number
                        type: integer
                        example: 0
                      sort:
                        title: Sort
                        description: Sorting params
                        type: object
                        properties:
                          empty:
                            type: boolean
                            example: false
                          sorted:
                            type: boolean
                            example: true
                          unsorted:
                            type: boolean
                            example: false
                      numberOfElements:
                        title: NumberOfElements
                        description: Number of artifacts per page
                        type: integer
                        example: 2
                      first:
                        title: First
                        description: Is this the first page?
                        type: boolean
                        example: true
                      empty:
                        title: Empty
                        description: Is the page empty?
                        type: boolean
                        example: false
      security: []
  /artifacts/images:
    post:
      tags:
      - artifact
      summary: Upload the image of an artifact
      description: Upload the image of an artifact and return the URL of the uploaded image.
      operationId: uploadArtifactImage
      requestBody:
        description: The container name and the artifact image file
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                containerName:
                  type: string
                file:
                  type: string
                  format: binary
        required: true
      responses:
        "200":
          description: Artifact image uploaded and its URL returned
          content:
            application/json:
              schema:
                title: API response for upload artifact image
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    description: Return code
                    example: 200
                  message:
                    type: string
                    example: Upload Image Success
                  data:
                    type: string
                    example: https://hogwartsartifactsonline.blob.core.windows.net/artifact-image-container/remembrall.jpg
  /wizards:
    get:
      tags:
      - wizard
      summary: Find all wizards
      description: Find all wizards and return them in an array.
      operationId: findAllWizards
      responses:
        "200":
          description: All wizards found and returned
          content:
            application/json:
              schema:
                title: API response for find all wizards
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Find All Success
                  data:
                    type: array
                    items:
                      title: Wizard
                      description: A wizard
                      type: object
                      properties:
                        id:
                          title: Id
                          description: Id of the wizard
                          type: integer
                          minimum: 1
                          example: 2
                          readOnly: true
                        name:
                          title: Wizard name
                          description: Name of the wizard
                          type: string
                          example: Harry Potter
                        numberOfArtifacts:
                          title: Number of artifacts
                          description: Number of artifacts owned by the wizard
                          type: integer
                          example: 2
                          readOnly: true
                      required:
                      - id
                      - name
                    example:
                    - id: 1
                      name: Albus Dumbledore
                      numberOfArtifacts: 2
                    - id: 2
                      name: Harry Potter
                      numberOfArtifacts: 2
                    - id: 3
                      name: Neville Longbottom
                      numberOfArtifacts: 1
    post:
      tags:
      - wizard
      summary: Add a wizard
      description: Add a new wizard and return the saved one.
      operationId: addWizard
      requestBody:
        description: The new wizard
        content:
          application/json:
            schema:
              allOf:
              - title: Wizard
                description: A wizard
                type: object
                properties:
                  id:
                    title: Id
                    description: Id of the wizard
                    type: integer
                    minimum: 1
                    example: 2
                    readOnly: true
                  name:
                    title: Wizard name
                    description: Name of the wizard
                    type: string
                    example: Harry Potter
                  numberOfArtifacts:
                    title: Number of artifacts
                    description: Number of artifacts owned by the wizard
                    type: integer
                    example: 2
                    readOnly: true
                required:
                - id
                - name
            examples:
              Hermione:
                value:
                  name: Hermione Granger
        required: true
      responses:
        "200":
          description: Wizard added and returned
          content:
            application/json:
              schema:
                title: API response for add wizard
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    description: Return code
                    example: 200
                  message:
                    type: string
                    example: Add Success
                  data:
                    allOf:
                    - title: Wizard
                      description: A wizard
                      type: object
                      properties:
                        id:
                          title: Id
                          description: Id of the wizard
                          type: integer
                          minimum: 1
                          example: 2
                          readOnly: true
                        name:
                          title: Wizard name
                          description: Name of the wizard
                          type: string
                          example: Harry Potter
                        numberOfArtifacts:
                          title: Number of artifacts
                          description: Number of artifacts owned by the wizard
                          type: integer
                          example: 2
                          readOnly: true
                      required:
                      - id
                      - name
                    example:
                      id: 4
                      name: Hermione Granger
                      numberOfArtifacts: 0
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                title: API response for bad request error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 400
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: "Provided arguments are invalid, see data for details."
                    readOnly: true
                  data:
                    title: Wizard bad request
                    description: Messages describing a bad request error
                    type: object
                    properties:
                      name:
                        title: Name of the wizard
                        description: The error message
                        type: string
                        example: name is required.
  /wizards/{wizardId}:
    get:
      tags:
      - wizard
      summary: Find a wizard by Id
      description: Find a single wizard and return it.
      operationId: findWizardById
      parameters:
      - name: wizardId
        in: path
        description: Id of wizard to return
        required: true
        schema:
          type: integer
        examples:
          wizardIdExample:
            value: 1
      responses:
        "200":
          description: Wizard found and returned
          content:
            application/json:
              schema:
                title: API response for find one wizard
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Find One Success
                  data:
                    allOf:
                    - title: Wizard
                      description: A wizard
                      type: object
                      properties:
                        id:
                          title: Id
                          description: Id of the wizard
                          type: integer
                          minimum: 1
                          example: 2
                          readOnly: true
                        name:
                          title: Wizard name
                          description: Name of the wizard
                          type: string
                          example: Harry Potter
                        numberOfArtifacts:
                          title: Number of artifacts
                          description: Number of artifacts owned by the wizard
                          type: integer
                          example: 2
                          readOnly: true
                      required:
                      - id
                      - name
                    example:
                      id: 1
                      name: Albus Dumbledore
                      numberOfArtifacts: 2
        "404":
          description: Wizard not found
          content:
            application/json:
              schema:
                title: API response for not found error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 404
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: Could not find wizard with Id 9 :(
                    readOnly: true
                  data:
                    type: object
                    example: null
    put:
      tags:
      - wizard
      summary: Update a wizard
      description: Update an exisiting wizard and return the updated one.
      operationId: updateWizard
      parameters:
      - name: wizardId
        in: path
        description: Id of wizard to update
        required: true
        schema:
          type: integer
        examples:
          wizardIdExample:
            value: 2
      requestBody:
        description: The wizard with updated info
        content:
          application/json:
            schema:
              allOf:
              - title: Wizard
                description: A wizard
                type: object
                properties:
                  id:
                    title: Id
                    description: Id of the wizard
                    type: integer
                    minimum: 1
                    example: 2
                    readOnly: true
                  name:
                    title: Wizard name
                    description: Name of the wizard
                    type: string
                    example: Harry Potter
                  numberOfArtifacts:
                    title: Number of artifacts
                    description: Number of artifacts owned by the wizard
                    type: integer
                    example: 2
                    readOnly: true
                required:
                - id
                - name
            examples:
              Harry:
                value:
                  name: Harry Potter-update
        required: true
      responses:
        "200":
          description: Wizard updated and returned
          content:
            application/json:
              schema:
                title: API response for update wizard
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    description: Return code
                    example: 200
                  message:
                    type: string
                    example: Update Success
                  data:
                    allOf:
                    - title: Wizard
                      description: A wizard
                      type: object
                      properties:
                        id:
                          title: Id
                          description: Id of the wizard
                          type: integer
                          minimum: 1
                          example: 2
                          readOnly: true
                        name:
                          title: Wizard name
                          description: Name of the wizard
                          type: string
                          example: Harry Potter
                        numberOfArtifacts:
                          title: Number of artifacts
                          description: Number of artifacts owned by the wizard
                          type: integer
                          example: 2
                          readOnly: true
                      required:
                      - id
                      - name
                    example:
                      id: 2
                      name: Harry Potter-update
                      numberOfArtifacts: 2
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                title: API response for bad request error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 400
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: "Provided arguments are invalid, see data for details."
                    readOnly: true
                  data:
                    title: Wizard bad request
                    description: Messages describing a bad request error
                    type: object
                    properties:
                      name:
                        title: Name of the wizard
                        description: The error message
                        type: string
                        example: name is required.
        "404":
          description: Wizard not found
          content:
            application/json:
              schema:
                title: API response for not found error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 404
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: Could not find wizard with Id 9 :(
                    readOnly: true
                  data:
                    type: object
                    example: null
    delete:
      tags:
      - wizard
      summary: Delete a wizard
      description: Delete a single wizard. This will not delete
      operationId: deleteWizard
      parameters:
      - name: wizardId
        in: path
        description: Id of wizard to delete
        required: true
        schema:
          type: integer
        examples:
          wizardIdExample:
            value: 1
      responses:
        "200":
          description: Wizard deleted
          content:
            application/json:
              schema:
                title: API response for delete
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    description: Return code
                    example: 200
                  message:
                    type: string
                    example: Delete Success
                  data:
                    type: object
                    example: null
        "404":
          description: Wizard not found
          content:
            application/json:
              schema:
                title: API response for not found error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 404
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: Could not find wizard with Id 9 :(
                    readOnly: true
                  data:
                    type: object
                    example: null
  /wizards/{wizardId}/artifacts/{artifactId}:
    put:
      tags:
      - wizard
      summary: Assign an artifact to a wizard
      description: Assign an artifact to a wizard.
      operationId: assignArtifact
      parameters:
      - name: wizardId
        in: path
        description: Id of wizard to assign
        required: true
        schema:
          type: integer
        examples:
          wizardIdExample:
            value: 1
      - name: artifactId
        in: path
        description: Id of artifact
        required: true
        schema:
          type: string
        examples:
          artifactIdExample:
            value: "1250808601744904196"
      responses:
        "200":
          description: Artifact assigned to a wizard
          content:
            application/json:
              schema:
                title: API response for artifact assignment
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    description: Return code
                    example: 200
                  message:
                    type: string
                    example: Artifact Assignment Success
                  data:
                    type: object
                    example: null
        "404":
          description: Artifact or wizard not found
          content:
            application/json:
              schema:
                title: API response for not found error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 404
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: Could not find artifact with Id 1250808601744904199 :(
                    readOnly: true
                  data:
                    type: object
                    example: null
  /users:
    get:
      tags:
      - user
      summary: Find all users
      description: Find all users and return them in an array.
      operationId: findAllUsers
      responses:
        "200":
          description: All users found and returned
          content:
            application/json:
              schema:
                title: API response for find all users
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Find All Success
                  data:
                    type: array
                    items:
                      title: User
                      description: A user
                      allOf:
                      - title: User fields
                        description: "Editable fields of the user, used to update the user"
                        type: object
                        properties:
                          username:
                            title: Username
                            description: Username of the user
                            type: string
                            minLength: 1
                            maxLength: 30
                            pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
                            example: john
                          enabled:
                            title: User account status
                            description: Status of the user
                            type: boolean
                            example: true
                          roles:
                            title: User roles
                            description: Roles of the user
                            type: string
                            example: admin user
                        required:
                        - username
                        - enabled
                        - roles
                      - type: object
                        properties:
                          id:
                            title: Id
                            description: Id of the user
                            type: integer
                            minimum: 1
                            example: 1
                            readOnly: true
                          password:
                            title: Password
                            description: Password of the user
                            type: string
                            minLength: 8
                            maxLength: 30
                            pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
                            example: ABCDEfghi123456*()
                            writeOnly: true
                        required:
                        - id
                        - password
                    example:
                    - id: 1
                      username: john
                      enabled: true
                      roles: admin user
                    - id: 2
                      username: eric
                      enabled: true
                      roles: user
                    - id: 3
                      username: tom
                      enabled: false
                      roles: user
    post:
      tags:
      - user
      summary: Add a user
      description: Add a new user and return the saved one. Only users with admin role can perform this operation.
      operationId: addUser
      requestBody:
        description: The new user
        content:
          application/json:
            schema:
              allOf:
              - title: User
                description: A user
                allOf:
                - title: User fields
                  description: "Editable fields of the user, used to update the user"
                  type: object
                  properties:
                    username:
                      title: Username
                      description: Username of the user
                      type: string
                      minLength: 1
                      maxLength: 30
                      pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
                      example: john
                    enabled:
                      title: User account status
                      description: Status of the user
                      type: boolean
                      example: true
                    roles:
                      title: User roles
                      description: Roles of the user
                      type: string
                      example: admin user
                  required:
                  - username
                  - enabled
                  - roles
                - type: object
                  properties:
                    id:
                      title: Id
                      description: Id of the user
                      type: integer
                      minimum: 1
                      example: 1
                      readOnly: true
                    password:
                      title: Password
                      description: Password of the user
                      type: string
                      minLength: 8
                      maxLength: 30
                      pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
                      example: ABCDEfghi123456*()
                      writeOnly: true
                  required:
                  - id
                  - password
            examples:
              Lily:
                value:
                  username: lily
                  password: ABCDEfghi123456*()
                  enabled: true
                  roles: user
        required: true
      responses:
        "200":
          description: User added and returned
          content:
            application/json:
              schema:
                title: API response for add user
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    description: Return code
                    example: 200
                  message:
                    type: string
                    example: Add Success
                  data:
                    allOf:
                    - title: User
                      description: A user
                      allOf:
                      - title: User fields
                        description: "Editable fields of the user, used to update the user"
                        type: object
                        properties:
                          username:
                            title: Username
                            description: Username of the user
                            type: string
                            minLength: 1
                            maxLength: 30
                            pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
                            example: john
                          enabled:
                            title: User account status
                            description: Status of the user
                            type: boolean
                            example: true
                          roles:
                            title: User roles
                            description: Roles of the user
                            type: string
                            example: admin user
                        required:
                        - username
                        - enabled
                        - roles
                      - type: object
                        properties:
                          id:
                            title: Id
                            description: Id of the user
                            type: integer
                            minimum: 1
                            example: 1
                            readOnly: true
                          password:
                            title: Password
                            description: Password of the user
                            type: string
                            minLength: 8
                            maxLength: 30
                            pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
                            example: ABCDEfghi123456*()
                            writeOnly: true
                        required:
                        - id
                        - password
                    example:
                      id: 4
                      username: lily
                      enabled: true
                      roles: user
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                title: API response for bad request error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 400
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: "Provided arguments are invalid, see data for details."
                    readOnly: true
                  data:
                    title: User Post bad request
                    description: Messages describing a bad request error
                    type: object
                    properties:
                      username:
                        title: Username of the user
                        description: The error message
                        type: string
                        example: username is required.
                      password:
                        title: User password
                        description: The error message
                        type: string
                        example: password is required.
                      roles:
                        title: User roles
                        description: The error message
                        type: string
                        example: roles are required.
  /users/{userId}:
    get:
      tags:
      - user
      summary: Find a user by Id
      description: Find a single user and return it.
      operationId: findUserById
      parameters:
      - name: userId
        in: path
        description: Id of user to return
        required: true
        schema:
          type: integer
        examples:
          userIdExample:
            value: 2
      responses:
        "200":
          description: User found and returned
          content:
            application/json:
              schema:
                title: API response for find one user
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Find One Success
                  data:
                    allOf:
                    - title: User
                      description: A user
                      allOf:
                      - title: User fields
                        description: "Editable fields of the user, used to update the user"
                        type: object
                        properties:
                          username:
                            title: Username
                            description: Username of the user
                            type: string
                            minLength: 1
                            maxLength: 30
                            pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
                            example: john
                          enabled:
                            title: User account status
                            description: Status of the user
                            type: boolean
                            example: true
                          roles:
                            title: User roles
                            description: Roles of the user
                            type: string
                            example: admin user
                        required:
                        - username
                        - enabled
                        - roles
                      - type: object
                        properties:
                          id:
                            title: Id
                            description: Id of the user
                            type: integer
                            minimum: 1
                            example: 1
                            readOnly: true
                          password:
                            title: Password
                            description: Password of the user
                            type: string
                            minLength: 8
                            maxLength: 30
                            pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
                            example: ABCDEfghi123456*()
                            writeOnly: true
                        required:
                        - id
                        - password
                    example:
                      id: 2
                      username: eric
                      enabled: true
                      roles: user
        "404":
          description: User not found
          content:
            application/json:
              schema:
                title: API response for not found error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 404
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: Could not find user with Id 10 :(
                    readOnly: true
                  data:
                    type: object
                    example: null
    put:
      tags:
      - user
      summary: Update a user
      description: Update an exisiting user and return the updated one.
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: Id of user to update
        required: true
        schema:
          type: integer
        examples:
          userIdExample:
            value: 1
      requestBody:
        description: The user with updated info
        content:
          application/json:
            schema:
              allOf:
              - title: User fields
                description: "Editable fields of the user, used to update the user"
                type: object
                properties:
                  username:
                    title: Username
                    description: Username of the user
                    type: string
                    minLength: 1
                    maxLength: 30
                    pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
                    example: john
                  enabled:
                    title: User account status
                    description: Status of the user
                    type: boolean
                    example: true
                  roles:
                    title: User roles
                    description: Roles of the user
                    type: string
                    example: admin user
                required:
                - username
                - enabled
                - roles
            examples:
              John:
                value:
                  username: john-update
                  enabled: true
                  roles: admin user
        required: true
      responses:
        "200":
          description: User updated and returned
          content:
            application/json:
              schema:
                title: API response for update user
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    description: Return code
                    example: 200
                  message:
                    type: string
                    example: Update Success
                  data:
                    allOf:
                    - title: User
                      description: A user
                      allOf:
                      - title: User fields
                        description: "Editable fields of the user, used to update the user"
                        type: object
                        properties:
                          username:
                            title: Username
                            description: Username of the user
                            type: string
                            minLength: 1
                            maxLength: 30
                            pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
                            example: john
                          enabled:
                            title: User account status
                            description: Status of the user
                            type: boolean
                            example: true
                          roles:
                            title: User roles
                            description: Roles of the user
                            type: string
                            example: admin user
                        required:
                        - username
                        - enabled
                        - roles
                      - type: object
                        properties:
                          id:
                            title: Id
                            description: Id of the user
                            type: integer
                            minimum: 1
                            example: 1
                            readOnly: true
                          password:
                            title: Password
                            description: Password of the user
                            type: string
                            minLength: 8
                            maxLength: 30
                            pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
                            example: ABCDEfghi123456*()
                            writeOnly: true
                        required:
                        - id
                        - password
                    example:
                      id: 1
                      username: john-update
                      enabled: true
                      roles: admin user
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                title: API response for bad request error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 400
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: "Provided arguments are invalid, see data for details."
                    readOnly: true
                  data:
                    title: User Put bad request
                    description: Messages describing a bad request error
                    type: object
                    properties:
                      username:
                        title: Username of the user
                        description: The error message
                        type: string
                        example: username is required.
                      roles:
                        title: User roles
                        description: The error message
                        type: string
                        example: roles are required.
        "404":
          description: User not found
          content:
            application/json:
              schema:
                title: API response for not found error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 404
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: Could not find user with Id 10 :(
                    readOnly: true
                  data:
                    type: object
                    example: null
    delete:
      tags:
      - user
      summary: Delete a user
      description: Delete a single user. Only users with admin role can perform this operation.
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: Id of user to delete
        required: true
        schema:
          type: integer
        examples:
          userIdExample:
            value: 3
      responses:
        "200":
          description: User deleted
          content:
            application/json:
              schema:
                title: API response for delete
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                  code:
                    type: integer
                    description: Return code
                    example: 200
                  message:
                    type: string
                    example: Delete Success
                  data:
                    type: object
                    example: null
        "404":
          description: User not found
          content:
            application/json:
              schema:
                title: API response for not found error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 404
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: Could not find user with Id 10 :(
                    readOnly: true
                  data:
                    type: object
                    example: null
  /users/login:
    post:
      tags:
      - user
      summary: Log user into the system
      description: Use HTTP basic authentication to log in users and then return
      operationId: login
      parameters:
      - name: username
        in: query
        description: The username for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in (clear text)
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User logged in
          content:
            application/json:
              schema:
                title: API response for successful login
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Success or not
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User Info and JSON Web Token
                  data:
                    title: User information and JWT
                    description: Information about the logged-in user and the JSON web token
                    properties:
                      userInfo:
                        allOf:
                        - title: User
                          description: A user
                          allOf:
                          - title: User fields
                            description: "Editable fields of the user, used to update the user"
                            type: object
                            properties:
                              username:
                                title: Username
                                description: Username of the user
                                type: string
                                minLength: 1
                                maxLength: 30
                                pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
                                example: john
                              enabled:
                                title: User account status
                                description: Status of the user
                                type: boolean
                                example: true
                              roles:
                                title: User roles
                                description: Roles of the user
                                type: string
                                example: admin user
                            required:
                            - username
                            - enabled
                            - roles
                          - type: object
                            properties:
                              id:
                                title: Id
                                description: Id of the user
                                type: integer
                                minimum: 1
                                example: 1
                                readOnly: true
                              password:
                                title: Password
                                description: Password of the user
                                type: string
                                minLength: 8
                                maxLength: 30
                                pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
                                example: ABCDEfghi123456*()
                                writeOnly: true
                            required:
                            - id
                            - password
                        example:
                          id: 1
                          username: john
                          enabled: true
                          roles: admin user
                      token:
                        type: string
                        example: eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoiam9obiIsImV4cCI6MTY3NDc5NTc1MSwiaWF0IjoxNjc0NzA5MzUxLCJhdXRob3JpdGllcyI6ImFkbWluIHVzZXIifQ.ZaXHGocHD0-HtcmTdflOVaf2-FWUTE7y65VS-Tzli5gaIGKCEjbDCu2n-p10a0DqdunnJBwGnvMB1XGwPNL-6JWr5ECOVOGH8N3H_Wc1j3nItIX2P4voh0cegw1JNyJcGwdBCLdquGQtW2dLMCV_c4peSoQ8UwHdlvABxsBSuUVy7cyiF_vgFDR0M8nNmePJATuroani61TjNxbnSz09WDUZOYxLujxBH27tdYXiVv5JMGVp4ZkyhrRx-bf8_vEryq3HeqztHGrgtKDH7FJbeWvnI4CmNuxvU_AdEjhXyUADLdz-eO3tc8hje1R4kBWnfpX3Mxdj1ZLxo_bvDYrN1A
        "401":
          description: Bad credentials
          content:
            application/json:
              schema:
                title: API response for not found error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 401
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: username or password is incorrect.
                    readOnly: true
                  data:
                    type: object
                    example: Bad credentials
      security:
      - BasicAuth: []
  /users/{userId}/password:
    patch:
      tags:
      - user
      summary: Change user password
      description: Change the password of a user.
      operationId: changePassword
      parameters:
      - name: userId
        in: path
        description: Id of user to change password
        required: true
        schema:
          type: integer
        examples:
          userIdExample:
            value: 2
      requestBody:
        description: The password info
        content:
          application/json:
            examples:
              eric:
                value:
                  oldPassword: "654321"
                  newPassword: Abc12345
                  confirmNewPassword: Abc12345
        required: true
      responses:
        "200":
          description: User password changed successfully
          content:
            application/json:
              examples:
                Success:
                  value:
                    flag: true
                    code: 200
                    message: Change Password Success
                    data: null
        "400":
          description: Bad request
          content:
            application/json:
              examples:
                NewPasswordNotMatchingConfirmNewPassword:
                  value:
                    flag: false
                    code: 400
                    message: New password and confirm new password do not match.
                    data: null
                NewPasswordNotConfirmingToPolicy:
                  value:
                    flag: false
                    code: 400
                    message: New password does not conform to the password policy.
                    data: null
        "401":
          description: Unauthorized
          content:
            application/json:
              examples:
                OldPasswordWrong:
                  value:
                    flag: false
                    code: 401
                    message: username or password is incorrect.
                    data: Old password is incorrect.
        "404":
          description: User not found
          content:
            application/json:
              schema:
                title: API response for not found error
                description: The schema for bad request error
                type: object
                properties:
                  flag:
                    title: flag
                    description: Success or not
                    type: boolean
                    example: false
                    readOnly: true
                  code:
                    title: Http status code
                    description: Http status code
                    type: integer
                    example: 404
                    readOnly: true
                  message:
                    title: Message
                    description: The long error message
                    type: string
                    example: Could not find user with Id 10 :(
                    readOnly: true
                  data:
                    type: object
                    example: null
externalDocs:
  description: Find out more
  url: http://swagger.io
components:
  schemas:
    Artifact:
      title: Artifact
      description: An artifact
      type: object
      properties:
        id:
          title: Id
          description: Id of the artifact
          type: string
          example: "1250808601744904191"
          readOnly: true
        name:
          title: Artifact name
          description: Name of the artifact
          type: string
          example: Deluminator
        description:
          title: Artifact description
          description: Description of the artifact
          type: string
          example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
        imageUrl:
          title: Artifact image url
          description: Url of the image of the artifact
          type: string
          example: ImageUrl
        owner:
          allOf:
          - title: Wizard
            description: A wizard
            type: object
            properties:
              id:
                title: Id
                description: Id of the wizard
                type: integer
                minimum: 1
                example: 2
                readOnly: true
              name:
                title: Wizard name
                description: Name of the wizard
                type: string
                example: Harry Potter
              numberOfArtifacts:
                title: Number of artifacts
                description: Number of artifacts owned by the wizard
                type: integer
                example: 2
                readOnly: true
            required:
            - id
            - name
          - example:
              id: 1
              name: Albus Dumbledore
              numberOfArtifacts: 2
          - readOnly: true
      required:
      - id
      - name
      - description
      - imageUrl
    Wizard:
      title: Wizard
      description: A wizard
      type: object
      properties:
        id:
          title: Id
          description: Id of the wizard
          type: integer
          minimum: 1
          example: 2
          readOnly: true
        name:
          title: Wizard name
          description: Name of the wizard
          type: string
          example: Harry Potter
        numberOfArtifacts:
          title: Number of artifacts
          description: Number of artifacts owned by the wizard
          type: integer
          example: 2
          readOnly: true
      required:
      - id
      - name
    User:
      title: User
      description: A user
      allOf:
      - title: User fields
        description: "Editable fields of the user, used to update the user"
        type: object
        properties:
          username:
            title: Username
            description: Username of the user
            type: string
            minLength: 1
            maxLength: 30
            pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
            example: john
          enabled:
            title: User account status
            description: Status of the user
            type: boolean
            example: true
          roles:
            title: User roles
            description: Roles of the user
            type: string
            example: admin user
        required:
        - username
        - enabled
        - roles
      - type: object
        properties:
          id:
            title: Id
            description: Id of the user
            type: integer
            minimum: 1
            example: 1
            readOnly: true
          password:
            title: Password
            description: Password of the user
            type: string
            minLength: 8
            maxLength: 30
            pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
            example: ABCDEfghi123456*()
            writeOnly: true
        required:
        - id
        - password
    UserEditableFields:
      title: User fields
      description: "Editable fields of the user, used to update the user"
      type: object
      properties:
        username:
          title: Username
          description: Username of the user
          type: string
          minLength: 1
          maxLength: 30
          pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
          example: john
        enabled:
          title: User account status
          description: Status of the user
          type: boolean
          example: true
        roles:
          title: User roles
          description: Roles of the user
          type: string
          example: admin user
      required:
      - username
      - enabled
      - roles
    ArtifactList:
      type: array
      items:
        title: Artifact
        description: An artifact
        type: object
        properties:
          id:
            title: Id
            description: Id of the artifact
            type: string
            example: "1250808601744904191"
            readOnly: true
          name:
            title: Artifact name
            description: Name of the artifact
            type: string
            example: Deluminator
          description:
            title: Artifact description
            description: Description of the artifact
            type: string
            example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
          imageUrl:
            title: Artifact image url
            description: Url of the image of the artifact
            type: string
            example: ImageUrl
          owner:
            allOf:
            - title: Wizard
              description: A wizard
              type: object
              properties:
                id:
                  title: Id
                  description: Id of the wizard
                  type: integer
                  minimum: 1
                  example: 2
                  readOnly: true
                name:
                  title: Wizard name
                  description: Name of the wizard
                  type: string
                  example: Harry Potter
                numberOfArtifacts:
                  title: Number of artifacts
                  description: Number of artifacts owned by the wizard
                  type: integer
                  example: 2
                  readOnly: true
              required:
              - id
              - name
            - example:
                id: 1
                name: Albus Dumbledore
                numberOfArtifacts: 2
            - readOnly: true
        required:
        - id
        - name
        - description
        - imageUrl
      example:
      - id: "1250808601744904191"
        name: Deluminator
        description: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
        imageUrl: ImageUrl
        owner:
          id: 1
          name: Albus Dumbledore
          numberOfArtifacts: 2
      - id: "1250808601744904192"
        name: Invisibility Cloak
        description: An invisibility cloak is used to make the wearer invisible.
        imageUrl: ImageUrl
        owner:
          id: 2
          name: Harry Potter
          numberOfArtifacts: 2
      - id: "1250808601744904193"
        name: Elder Wand
        description: "The Elder Wand, known throughout history as the Deathstick or the Wand of Destiny, is an extremely powerful wand made of elder wood with a core of Thestral tail hair."
        imageUrl: ImageUrl
        owner:
          id: 1
          name: Albus Dumbledore
          numberOfArtifacts: 2
      - id: "1250808601744904194"
        name: The Marauder's Map
        description: "A magical map of Hogwarts created by Remus Lupin, Peter Pettigrew, Sirius Black, and James Potter while they were students at Hogwarts."
        imageUrl: ImageUrl
        owner:
          id: 2
          name: Harry Potter
          numberOfArtifacts: 2
      - id: "1250808601744904195"
        name: The Sword Of Gryffindor
        description: "A goblin-made sword adorned with large rubies on the pommel. It was once owned by Godric Gryffindor, one of the medieval founders of Hogwarts."
        imageUrl: ImageUrl
        owner:
          id: 3
          name: Neville Longbottom
          numberOfArtifacts: 1
      - id: "1250808601744904196"
        name: Resurrection Stone
        description: "The Resurrection Stone allows the holder to bring back deceased loved ones, in a semi-physical form, and communicate with them."
        imageUrl: ImageUrl
        owner: null
    ArtifactPage:
      title: Artifact page
      description: A page of artifacts
      type: object
      properties:
        content:
          title: Content
          description: ""
          type: array
          items:
            title: Artifact
            description: An artifact
            type: object
            properties:
              id:
                title: Id
                description: Id of the artifact
                type: string
                example: "1250808601744904191"
                readOnly: true
              name:
                title: Artifact name
                description: Name of the artifact
                type: string
                example: Deluminator
              description:
                title: Artifact description
                description: Description of the artifact
                type: string
                example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
              imageUrl:
                title: Artifact image url
                description: Url of the image of the artifact
                type: string
                example: ImageUrl
              owner:
                allOf:
                - title: Wizard
                  description: A wizard
                  type: object
                  properties:
                    id:
                      title: Id
                      description: Id of the wizard
                      type: integer
                      minimum: 1
                      example: 2
                      readOnly: true
                    name:
                      title: Wizard name
                      description: Name of the wizard
                      type: string
                      example: Harry Potter
                    numberOfArtifacts:
                      title: Number of artifacts
                      description: Number of artifacts owned by the wizard
                      type: integer
                      example: 2
                      readOnly: true
                  required:
                  - id
                  - name
                - example:
                    id: 1
                    name: Albus Dumbledore
                    numberOfArtifacts: 2
                - readOnly: true
            required:
            - id
            - name
            - description
            - imageUrl
          example:
          - id: "1250808601744904194"
            name: The Marauder's Map
            description: "A magical map of Hogwarts created by Remus Lupin, Peter Pettigrew, Sirius Black, and James Potter while they were students at Hogwarts."
            imageUrl: ImageUrl
            owner:
              id: 2
              name: Harry Potter
              numberOfArtifacts: 2
          - id: "1250808601744904195"
            name: The Sword Of Gryffindor
            description: "A goblin-made sword adorned with large rubies on the pommel. It was once owned by Godric Gryffindor, one of the medieval founders of Hogwarts."
            imageUrl: ImageUrl
            owner:
              id: 3
              name: Neville Longbottom
              numberOfArtifacts: 1
        pageable:
          title: Pageable
          description: Information about the pagination
          type: object
          properties:
            pageNumber:
              type: integer
              example: 2
            pageSize:
              type: integer
              example: 2
            sort:
              type: object
              properties:
                empty:
                  type: boolean
                  example: false
                sorted:
                  type: boolean
                  example: true
                unsorted:
                  type: boolean
                  example: false
            offset:
              type: integer
              example: 4
            paged:
              type: boolean
              example: true
            unpaged:
              type: boolean
              example: false
        totalPages:
          title: Total pages
          description: Total number of pages
          type: integer
          example: 3
        totalElements:
          title: Total elements
          description: Total number of artifacts in the database
          type: integer
          example: 6
        last:
          title: Last
          description: Is this the last page?
          type: boolean
          example: true
        size:
          title: Size
          description: Number of artifacts per page
          type: integer
          example: 2
        number:
          title: Number
          description: Page number
          type: integer
          example: 2
        sort:
          title: Sort
          description: Sorting params
          type: object
          properties:
            empty:
              type: boolean
              example: false
            sorted:
              type: boolean
              example: true
            unsorted:
              type: boolean
              example: false
        numberOfElements:
          title: NumberOfElements
          description: Number of artifacts per page
          type: integer
          example: 2
        first:
          title: First
          description: Is this the first page?
          type: boolean
          example: false
        empty:
          title: Empty
          description: Is the page empty?
          type: boolean
          example: false
    SearchArtifactPage:
      title: Search artifact page
      description: A page of artifacts
      type: object
      properties:
        content:
          title: Content
          description: ""
          type: array
          items:
            title: Artifact
            description: An artifact
            type: object
            properties:
              id:
                title: Id
                description: Id of the artifact
                type: string
                example: "1250808601744904191"
                readOnly: true
              name:
                title: Artifact name
                description: Name of the artifact
                type: string
                example: Deluminator
              description:
                title: Artifact description
                description: Description of the artifact
                type: string
                example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
              imageUrl:
                title: Artifact image url
                description: Url of the image of the artifact
                type: string
                example: ImageUrl
              owner:
                allOf:
                - title: Wizard
                  description: A wizard
                  type: object
                  properties:
                    id:
                      title: Id
                      description: Id of the wizard
                      type: integer
                      minimum: 1
                      example: 2
                      readOnly: true
                    name:
                      title: Wizard name
                      description: Name of the wizard
                      type: string
                      example: Harry Potter
                    numberOfArtifacts:
                      title: Number of artifacts
                      description: Number of artifacts owned by the wizard
                      type: integer
                      example: 2
                      readOnly: true
                  required:
                  - id
                  - name
                - example:
                    id: 1
                    name: Albus Dumbledore
                    numberOfArtifacts: 2
                - readOnly: true
            required:
            - id
            - name
            - description
            - imageUrl
          example:
          - id: "1250808601744904194"
            name: The Marauder's Map
            description: "A magical map of Hogwarts created by Remus Lupin, Peter Pettigrew, Sirius Black, and James Potter while they were students at Hogwarts."
            imageUrl: ImageUrl
            owner:
              id: 2
              name: Harry Potter
              numberOfArtifacts: 2
          - id: "1250808601744904195"
            name: The Sword Of Gryffindor
            description: "A goblin-made sword adorned with large rubies on the pommel. It was once owned by Godric Gryffindor, one of the medieval founders of Hogwarts."
            imageUrl: ImageUrl
            owner:
              id: 3
              name: Neville Longbottom
              numberOfArtifacts: 1
        pageable:
          title: Pageable
          description: Information about the pagination
          type: object
          properties:
            pageNumber:
              type: integer
              example: 0
            pageSize:
              type: integer
              example: 2
            sort:
              type: object
              properties:
                empty:
                  type: boolean
                  example: false
                sorted:
                  type: boolean
                  example: true
                unsorted:
                  type: boolean
                  example: false
            offset:
              type: integer
              example: 0
            paged:
              type: boolean
              example: true
            unpaged:
              type: boolean
              example: false
        totalPages:
          title: Total pages
          description: Total number of pages
          type: integer
          example: 1
        totalElements:
          title: Total elements
          description: Total number of artifacts matching search criteria
          type: integer
          example: 2
        last:
          title: Last
          description: Is this the last page?
          type: boolean
          example: true
        size:
          title: Size
          description: Number of artifacts per page
          type: integer
          example: 2
        number:
          title: Number
          description: Page number
          type: integer
          example: 0
        sort:
          title: Sort
          description: Sorting params
          type: object
          properties:
            empty:
              type: boolean
              example: false
            sorted:
              type: boolean
              example: true
            unsorted:
              type: boolean
              example: false
        numberOfElements:
          title: NumberOfElements
          description: Number of artifacts per page
          type: integer
          example: 2
        first:
          title: First
          description: Is this the first page?
          type: boolean
          example: true
        empty:
          title: Empty
          description: Is the page empty?
          type: boolean
          example: false
    WizardList:
      type: array
      items:
        title: Wizard
        description: A wizard
        type: object
        properties:
          id:
            title: Id
            description: Id of the wizard
            type: integer
            minimum: 1
            example: 2
            readOnly: true
          name:
            title: Wizard name
            description: Name of the wizard
            type: string
            example: Harry Potter
          numberOfArtifacts:
            title: Number of artifacts
            description: Number of artifacts owned by the wizard
            type: integer
            example: 2
            readOnly: true
        required:
        - id
        - name
      example:
      - id: 1
        name: Albus Dumbledore
        numberOfArtifacts: 2
      - id: 2
        name: Harry Potter
        numberOfArtifacts: 2
      - id: 3
        name: Neville Longbottom
        numberOfArtifacts: 1
    UserList:
      type: array
      items:
        title: User
        description: A user
        allOf:
        - title: User fields
          description: "Editable fields of the user, used to update the user"
          type: object
          properties:
            username:
              title: Username
              description: Username of the user
              type: string
              minLength: 1
              maxLength: 30
              pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
              example: john
            enabled:
              title: User account status
              description: Status of the user
              type: boolean
              example: true
            roles:
              title: User roles
              description: Roles of the user
              type: string
              example: admin user
          required:
          - username
          - enabled
          - roles
        - type: object
          properties:
            id:
              title: Id
              description: Id of the user
              type: integer
              minimum: 1
              example: 1
              readOnly: true
            password:
              title: Password
              description: Password of the user
              type: string
              minLength: 8
              maxLength: 30
              pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
              example: ABCDEfghi123456*()
              writeOnly: true
          required:
          - id
          - password
      example:
      - id: 1
        username: john
        enabled: true
        roles: admin user
      - id: 2
        username: eric
        enabled: true
        roles: user
      - id: 3
        username: tom
        enabled: false
        roles: user
    ApiResponseAddArtifact:
      title: API response for add artifact
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          description: Return code
          example: 200
        message:
          type: string
          example: Add Success
        data:
          allOf:
          - title: Artifact
            description: An artifact
            type: object
            properties:
              id:
                title: Id
                description: Id of the artifact
                type: string
                example: "1250808601744904191"
                readOnly: true
              name:
                title: Artifact name
                description: Name of the artifact
                type: string
                example: Deluminator
              description:
                title: Artifact description
                description: Description of the artifact
                type: string
                example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
              imageUrl:
                title: Artifact image url
                description: Url of the image of the artifact
                type: string
                example: ImageUrl
              owner:
                allOf:
                - title: Wizard
                  description: A wizard
                  type: object
                  properties:
                    id:
                      title: Id
                      description: Id of the wizard
                      type: integer
                      minimum: 1
                      example: 2
                      readOnly: true
                    name:
                      title: Wizard name
                      description: Name of the wizard
                      type: string
                      example: Harry Potter
                    numberOfArtifacts:
                      title: Number of artifacts
                      description: Number of artifacts owned by the wizard
                      type: integer
                      example: 2
                      readOnly: true
                  required:
                  - id
                  - name
                - example:
                    id: 1
                    name: Albus Dumbledore
                    numberOfArtifacts: 2
                - readOnly: true
            required:
            - id
            - name
            - description
            - imageUrl
          example:
            id: "1250808601744904197"
            name: Remembrall
            description: A Remembrall was a magical large marble-sized glass ball that contained smoke which turned red when its owner or user had forgotten something. It turned clear once whatever was forgotten was remembered.
            imageUrl: https://hogwartsartifactsonline.blob.core.windows.net/artifact-image-container/remembrall.jpg
            owner: null
    ApiResponseAddWizard:
      title: API response for add wizard
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          description: Return code
          example: 200
        message:
          type: string
          example: Add Success
        data:
          allOf:
          - title: Wizard
            description: A wizard
            type: object
            properties:
              id:
                title: Id
                description: Id of the wizard
                type: integer
                minimum: 1
                example: 2
                readOnly: true
              name:
                title: Wizard name
                description: Name of the wizard
                type: string
                example: Harry Potter
              numberOfArtifacts:
                title: Number of artifacts
                description: Number of artifacts owned by the wizard
                type: integer
                example: 2
                readOnly: true
            required:
            - id
            - name
          example:
            id: 4
            name: Hermione Granger
            numberOfArtifacts: 0
    ApiResponseAddUser:
      title: API response for add user
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          description: Return code
          example: 200
        message:
          type: string
          example: Add Success
        data:
          allOf:
          - title: User
            description: A user
            allOf:
            - title: User fields
              description: "Editable fields of the user, used to update the user"
              type: object
              properties:
                username:
                  title: Username
                  description: Username of the user
                  type: string
                  minLength: 1
                  maxLength: 30
                  pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
                  example: john
                enabled:
                  title: User account status
                  description: Status of the user
                  type: boolean
                  example: true
                roles:
                  title: User roles
                  description: Roles of the user
                  type: string
                  example: admin user
              required:
              - username
              - enabled
              - roles
            - type: object
              properties:
                id:
                  title: Id
                  description: Id of the user
                  type: integer
                  minimum: 1
                  example: 1
                  readOnly: true
                password:
                  title: Password
                  description: Password of the user
                  type: string
                  minLength: 8
                  maxLength: 30
                  pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
                  example: ABCDEfghi123456*()
                  writeOnly: true
              required:
              - id
              - password
          example:
            id: 4
            username: lily
            enabled: true
            roles: user
    ApiResponseUpdateArtifact:
      title: API response for update artifact
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          description: Return code
          example: 200
        message:
          type: string
          example: Update Success
        data:
          allOf:
          - title: Artifact
            description: An artifact
            type: object
            properties:
              id:
                title: Id
                description: Id of the artifact
                type: string
                example: "1250808601744904191"
                readOnly: true
              name:
                title: Artifact name
                description: Name of the artifact
                type: string
                example: Deluminator
              description:
                title: Artifact description
                description: Description of the artifact
                type: string
                example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
              imageUrl:
                title: Artifact image url
                description: Url of the image of the artifact
                type: string
                example: ImageUrl
              owner:
                allOf:
                - title: Wizard
                  description: A wizard
                  type: object
                  properties:
                    id:
                      title: Id
                      description: Id of the wizard
                      type: integer
                      minimum: 1
                      example: 2
                      readOnly: true
                    name:
                      title: Wizard name
                      description: Name of the wizard
                      type: string
                      example: Harry Potter
                    numberOfArtifacts:
                      title: Number of artifacts
                      description: Number of artifacts owned by the wizard
                      type: integer
                      example: 2
                      readOnly: true
                  required:
                  - id
                  - name
                - example:
                    id: 1
                    name: Albus Dumbledore
                    numberOfArtifacts: 2
                - readOnly: true
            required:
            - id
            - name
            - description
            - imageUrl
          example:
            id: "1250808601744904191"
            name: Deluminator-update
            description: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.-update
            imageUrl: ImageUrl-update
            owner:
              id: 1
              name: Albus Dumbledore
              numberOfArtifacts: 2
    ApiResponseUpdateWizard:
      title: API response for update wizard
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          description: Return code
          example: 200
        message:
          type: string
          example: Update Success
        data:
          allOf:
          - title: Wizard
            description: A wizard
            type: object
            properties:
              id:
                title: Id
                description: Id of the wizard
                type: integer
                minimum: 1
                example: 2
                readOnly: true
              name:
                title: Wizard name
                description: Name of the wizard
                type: string
                example: Harry Potter
              numberOfArtifacts:
                title: Number of artifacts
                description: Number of artifacts owned by the wizard
                type: integer
                example: 2
                readOnly: true
            required:
            - id
            - name
          example:
            id: 2
            name: Harry Potter-update
            numberOfArtifacts: 2
    ApiResponseUpdateUser:
      title: API response for update user
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          description: Return code
          example: 200
        message:
          type: string
          example: Update Success
        data:
          allOf:
          - title: User
            description: A user
            allOf:
            - title: User fields
              description: "Editable fields of the user, used to update the user"
              type: object
              properties:
                username:
                  title: Username
                  description: Username of the user
                  type: string
                  minLength: 1
                  maxLength: 30
                  pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
                  example: john
                enabled:
                  title: User account status
                  description: Status of the user
                  type: boolean
                  example: true
                roles:
                  title: User roles
                  description: Roles of the user
                  type: string
                  example: admin user
              required:
              - username
              - enabled
              - roles
            - type: object
              properties:
                id:
                  title: Id
                  description: Id of the user
                  type: integer
                  minimum: 1
                  example: 1
                  readOnly: true
                password:
                  title: Password
                  description: Password of the user
                  type: string
                  minLength: 8
                  maxLength: 30
                  pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
                  example: ABCDEfghi123456*()
                  writeOnly: true
              required:
              - id
              - password
          example:
            id: 1
            username: john-update
            enabled: true
            roles: admin user
    ApiResponseDelete:
      title: API response for delete
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          description: Return code
          example: 200
        message:
          type: string
          example: Delete Success
        data:
          type: object
          example: null
    ApiResponseArtifactAssignment:
      title: API response for artifact assignment
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          description: Return code
          example: 200
        message:
          type: string
          example: Artifact Assignment Success
        data:
          type: object
          example: null
    ApiResponseFindAllArtifacts:
      title: API response for find all artifacts
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          example: 200
        message:
          type: string
          examples:
          - Find All Success
        data:
          title: Artifact page
          description: A page of artifacts
          type: object
          properties:
            content:
              title: Content
              description: ""
              type: array
              items:
                title: Artifact
                description: An artifact
                type: object
                properties:
                  id:
                    title: Id
                    description: Id of the artifact
                    type: string
                    example: "1250808601744904191"
                    readOnly: true
                  name:
                    title: Artifact name
                    description: Name of the artifact
                    type: string
                    example: Deluminator
                  description:
                    title: Artifact description
                    description: Description of the artifact
                    type: string
                    example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
                  imageUrl:
                    title: Artifact image url
                    description: Url of the image of the artifact
                    type: string
                    example: ImageUrl
                  owner:
                    allOf:
                    - title: Wizard
                      description: A wizard
                      type: object
                      properties:
                        id:
                          title: Id
                          description: Id of the wizard
                          type: integer
                          minimum: 1
                          example: 2
                          readOnly: true
                        name:
                          title: Wizard name
                          description: Name of the wizard
                          type: string
                          example: Harry Potter
                        numberOfArtifacts:
                          title: Number of artifacts
                          description: Number of artifacts owned by the wizard
                          type: integer
                          example: 2
                          readOnly: true
                      required:
                      - id
                      - name
                    - example:
                        id: 1
                        name: Albus Dumbledore
                        numberOfArtifacts: 2
                    - readOnly: true
                required:
                - id
                - name
                - description
                - imageUrl
              example:
              - id: "1250808601744904194"
                name: The Marauder's Map
                description: "A magical map of Hogwarts created by Remus Lupin, Peter Pettigrew, Sirius Black, and James Potter while they were students at Hogwarts."
                imageUrl: ImageUrl
                owner:
                  id: 2
                  name: Harry Potter
                  numberOfArtifacts: 2
              - id: "1250808601744904195"
                name: The Sword Of Gryffindor
                description: "A goblin-made sword adorned with large rubies on the pommel. It was once owned by Godric Gryffindor, one of the medieval founders of Hogwarts."
                imageUrl: ImageUrl
                owner:
                  id: 3
                  name: Neville Longbottom
                  numberOfArtifacts: 1
            pageable:
              title: Pageable
              description: Information about the pagination
              type: object
              properties:
                pageNumber:
                  type: integer
                  example: 2
                pageSize:
                  type: integer
                  example: 2
                sort:
                  type: object
                  properties:
                    empty:
                      type: boolean
                      example: false
                    sorted:
                      type: boolean
                      example: true
                    unsorted:
                      type: boolean
                      example: false
                offset:
                  type: integer
                  example: 4
                paged:
                  type: boolean
                  example: true
                unpaged:
                  type: boolean
                  example: false
            totalPages:
              title: Total pages
              description: Total number of pages
              type: integer
              example: 3
            totalElements:
              title: Total elements
              description: Total number of artifacts in the database
              type: integer
              example: 6
            last:
              title: Last
              description: Is this the last page?
              type: boolean
              example: true
            size:
              title: Size
              description: Number of artifacts per page
              type: integer
              example: 2
            number:
              title: Number
              description: Page number
              type: integer
              example: 2
            sort:
              title: Sort
              description: Sorting params
              type: object
              properties:
                empty:
                  type: boolean
                  example: false
                sorted:
                  type: boolean
                  example: true
                unsorted:
                  type: boolean
                  example: false
            numberOfElements:
              title: NumberOfElements
              description: Number of artifacts per page
              type: integer
              example: 2
            first:
              title: First
              description: Is this the first page?
              type: boolean
              example: false
            empty:
              title: Empty
              description: Is the page empty?
              type: boolean
              example: false
    ApiResponseFindAllWizards:
      title: API response for find all wizards
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Find All Success
        data:
          type: array
          items:
            title: Wizard
            description: A wizard
            type: object
            properties:
              id:
                title: Id
                description: Id of the wizard
                type: integer
                minimum: 1
                example: 2
                readOnly: true
              name:
                title: Wizard name
                description: Name of the wizard
                type: string
                example: Harry Potter
              numberOfArtifacts:
                title: Number of artifacts
                description: Number of artifacts owned by the wizard
                type: integer
                example: 2
                readOnly: true
            required:
            - id
            - name
          example:
          - id: 1
            name: Albus Dumbledore
            numberOfArtifacts: 2
          - id: 2
            name: Harry Potter
            numberOfArtifacts: 2
          - id: 3
            name: Neville Longbottom
            numberOfArtifacts: 1
    ApiResponseFindAllUsers:
      title: API response for find all users
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Find All Success
        data:
          type: array
          items:
            title: User
            description: A user
            allOf:
            - title: User fields
              description: "Editable fields of the user, used to update the user"
              type: object
              properties:
                username:
                  title: Username
                  description: Username of the user
                  type: string
                  minLength: 1
                  maxLength: 30
                  pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
                  example: john
                enabled:
                  title: User account status
                  description: Status of the user
                  type: boolean
                  example: true
                roles:
                  title: User roles
                  description: Roles of the user
                  type: string
                  example: admin user
              required:
              - username
              - enabled
              - roles
            - type: object
              properties:
                id:
                  title: Id
                  description: Id of the user
                  type: integer
                  minimum: 1
                  example: 1
                  readOnly: true
                password:
                  title: Password
                  description: Password of the user
                  type: string
                  minLength: 8
                  maxLength: 30
                  pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
                  example: ABCDEfghi123456*()
                  writeOnly: true
              required:
              - id
              - password
          example:
          - id: 1
            username: john
            enabled: true
            roles: admin user
          - id: 2
            username: eric
            enabled: true
            roles: user
          - id: 3
            username: tom
            enabled: false
            roles: user
    ApiResponseFindOneArtifact:
      title: API response for find one artifact
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Find One Success
        data:
          allOf:
          - title: Artifact
            description: An artifact
            type: object
            properties:
              id:
                title: Id
                description: Id of the artifact
                type: string
                example: "1250808601744904191"
                readOnly: true
              name:
                title: Artifact name
                description: Name of the artifact
                type: string
                example: Deluminator
              description:
                title: Artifact description
                description: Description of the artifact
                type: string
                example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
              imageUrl:
                title: Artifact image url
                description: Url of the image of the artifact
                type: string
                example: ImageUrl
              owner:
                allOf:
                - title: Wizard
                  description: A wizard
                  type: object
                  properties:
                    id:
                      title: Id
                      description: Id of the wizard
                      type: integer
                      minimum: 1
                      example: 2
                      readOnly: true
                    name:
                      title: Wizard name
                      description: Name of the wizard
                      type: string
                      example: Harry Potter
                    numberOfArtifacts:
                      title: Number of artifacts
                      description: Number of artifacts owned by the wizard
                      type: integer
                      example: 2
                      readOnly: true
                  required:
                  - id
                  - name
                - example:
                    id: 1
                    name: Albus Dumbledore
                    numberOfArtifacts: 2
                - readOnly: true
            required:
            - id
            - name
            - description
            - imageUrl
          example:
            id: "1250808601744904192"
            name: Invisibility Cloak
            description: An invisibility cloak is used to make the wearer invisible.
            imageUrl: ImageUrl
            owner:
              id: 2
              name: Harry Potter
              numberOfArtifacts: 2
    ApiResponseFindOneWizard:
      title: API response for find one wizard
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Find One Success
        data:
          allOf:
          - title: Wizard
            description: A wizard
            type: object
            properties:
              id:
                title: Id
                description: Id of the wizard
                type: integer
                minimum: 1
                example: 2
                readOnly: true
              name:
                title: Wizard name
                description: Name of the wizard
                type: string
                example: Harry Potter
              numberOfArtifacts:
                title: Number of artifacts
                description: Number of artifacts owned by the wizard
                type: integer
                example: 2
                readOnly: true
            required:
            - id
            - name
          example:
            id: 1
            name: Albus Dumbledore
            numberOfArtifacts: 2
    ApiResponseFindOneUser:
      title: API response for find one user
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Find One Success
        data:
          allOf:
          - title: User
            description: A user
            allOf:
            - title: User fields
              description: "Editable fields of the user, used to update the user"
              type: object
              properties:
                username:
                  title: Username
                  description: Username of the user
                  type: string
                  minLength: 1
                  maxLength: 30
                  pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
                  example: john
                enabled:
                  title: User account status
                  description: Status of the user
                  type: boolean
                  example: true
                roles:
                  title: User roles
                  description: Roles of the user
                  type: string
                  example: admin user
              required:
              - username
              - enabled
              - roles
            - type: object
              properties:
                id:
                  title: Id
                  description: Id of the user
                  type: integer
                  minimum: 1
                  example: 1
                  readOnly: true
                password:
                  title: Password
                  description: Password of the user
                  type: string
                  minLength: 8
                  maxLength: 30
                  pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
                  example: ABCDEfghi123456*()
                  writeOnly: true
              required:
              - id
              - password
          example:
            id: 2
            username: eric
            enabled: true
            roles: user
    ApiResponseSummarizeArtifacts:
      title: API response for summarize artifacts
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Summarize Success
        data:
          type: string
          example: "The collection comprises six magical artifacts. Albus Dumbledore owns the Deluminator, a device to manipulate light, and the Elder Wand, a powerful wand made with Thestral tail hair. Harry Potter possesses the Invisibility Cloak that turns the wearer invisible and the Marauder's Map, a magical blueprint of Hogwarts. The Sword of Gryffindor, a goblin-made sword adorned with rubies, belongs to Neville Longbottom. The Resurrection Stone, able to bring back and communicate with deceased loved ones, lacks a specified owner."
    ApiResponseSearchArtifacts:
      title: API response for search artifacts
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          example: 200
        message:
          type: string
          examples:
          - Search Success
        data:
          title: Search artifact page
          description: A page of artifacts
          type: object
          properties:
            content:
              title: Content
              description: ""
              type: array
              items:
                title: Artifact
                description: An artifact
                type: object
                properties:
                  id:
                    title: Id
                    description: Id of the artifact
                    type: string
                    example: "1250808601744904191"
                    readOnly: true
                  name:
                    title: Artifact name
                    description: Name of the artifact
                    type: string
                    example: Deluminator
                  description:
                    title: Artifact description
                    description: Description of the artifact
                    type: string
                    example: A Deluminator is a device invented by Albus Dumbledore that resembles a cigarette lighter. It is used to remove or absorb (as well as return) the light from any light source to provide cover to the user.
                  imageUrl:
                    title: Artifact image url
                    description: Url of the image of the artifact
                    type: string
                    example: ImageUrl
                  owner:
                    allOf:
                    - title: Wizard
                      description: A wizard
                      type: object
                      properties:
                        id:
                          title: Id
                          description: Id of the wizard
                          type: integer
                          minimum: 1
                          example: 2
                          readOnly: true
                        name:
                          title: Wizard name
                          description: Name of the wizard
                          type: string
                          example: Harry Potter
                        numberOfArtifacts:
                          title: Number of artifacts
                          description: Number of artifacts owned by the wizard
                          type: integer
                          example: 2
                          readOnly: true
                      required:
                      - id
                      - name
                    - example:
                        id: 1
                        name: Albus Dumbledore
                        numberOfArtifacts: 2
                    - readOnly: true
                required:
                - id
                - name
                - description
                - imageUrl
              example:
              - id: "1250808601744904194"
                name: The Marauder's Map
                description: "A magical map of Hogwarts created by Remus Lupin, Peter Pettigrew, Sirius Black, and James Potter while they were students at Hogwarts."
                imageUrl: ImageUrl
                owner:
                  id: 2
                  name: Harry Potter
                  numberOfArtifacts: 2
              - id: "1250808601744904195"
                name: The Sword Of Gryffindor
                description: "A goblin-made sword adorned with large rubies on the pommel. It was once owned by Godric Gryffindor, one of the medieval founders of Hogwarts."
                imageUrl: ImageUrl
                owner:
                  id: 3
                  name: Neville Longbottom
                  numberOfArtifacts: 1
            pageable:
              title: Pageable
              description: Information about the pagination
              type: object
              properties:
                pageNumber:
                  type: integer
                  example: 0
                pageSize:
                  type: integer
                  example: 2
                sort:
                  type: object
                  properties:
                    empty:
                      type: boolean
                      example: false
                    sorted:
                      type: boolean
                      example: true
                    unsorted:
                      type: boolean
                      example: false
                offset:
                  type: integer
                  example: 0
                paged:
                  type: boolean
                  example: true
                unpaged:
                  type: boolean
                  example: false
            totalPages:
              title: Total pages
              description: Total number of pages
              type: integer
              example: 1
            totalElements:
              title: Total elements
              description: Total number of artifacts matching search criteria
              type: integer
              example: 2
            last:
              title: Last
              description: Is this the last page?
              type: boolean
              example: true
            size:
              title: Size
              description: Number of artifacts per page
              type: integer
              example: 2
            number:
              title: Number
              description: Page number
              type: integer
              example: 0
            sort:
              title: Sort
              description: Sorting params
              type: object
              properties:
                empty:
                  type: boolean
                  example: false
                sorted:
                  type: boolean
                  example: true
                unsorted:
                  type: boolean
                  example: false
            numberOfElements:
              title: NumberOfElements
              description: Number of artifacts per page
              type: integer
              example: 2
            first:
              title: First
              description: Is this the first page?
              type: boolean
              example: true
            empty:
              title: Empty
              description: Is the page empty?
              type: boolean
              example: false
    ApiResponseUploadArtifactImage:
      title: API response for upload artifact image
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          description: Return code
          example: 200
        message:
          type: string
          example: Upload Image Success
        data:
          type: string
          example: https://hogwartsartifactsonline.blob.core.windows.net/artifact-image-container/remembrall.jpg
    ApiResponseToken:
      title: API response for successful login
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: User Info and JSON Web Token
        data:
          title: User information and JWT
          description: Information about the logged-in user and the JSON web token
          properties:
            userInfo:
              allOf:
              - title: User
                description: A user
                allOf:
                - title: User fields
                  description: "Editable fields of the user, used to update the user"
                  type: object
                  properties:
                    username:
                      title: Username
                      description: Username of the user
                      type: string
                      minLength: 1
                      maxLength: 30
                      pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
                      example: john
                    enabled:
                      title: User account status
                      description: Status of the user
                      type: boolean
                      example: true
                    roles:
                      title: User roles
                      description: Roles of the user
                      type: string
                      example: admin user
                  required:
                  - username
                  - enabled
                  - roles
                - type: object
                  properties:
                    id:
                      title: Id
                      description: Id of the user
                      type: integer
                      minimum: 1
                      example: 1
                      readOnly: true
                    password:
                      title: Password
                      description: Password of the user
                      type: string
                      minLength: 8
                      maxLength: 30
                      pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
                      example: ABCDEfghi123456*()
                      writeOnly: true
                  required:
                  - id
                  - password
              example:
                id: 1
                username: john
                enabled: true
                roles: admin user
            token:
              type: string
              example: eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoiam9obiIsImV4cCI6MTY3NDc5NTc1MSwiaWF0IjoxNjc0NzA5MzUxLCJhdXRob3JpdGllcyI6ImFkbWluIHVzZXIifQ.ZaXHGocHD0-HtcmTdflOVaf2-FWUTE7y65VS-Tzli5gaIGKCEjbDCu2n-p10a0DqdunnJBwGnvMB1XGwPNL-6JWr5ECOVOGH8N3H_Wc1j3nItIX2P4voh0cegw1JNyJcGwdBCLdquGQtW2dLMCV_c4peSoQ8UwHdlvABxsBSuUVy7cyiF_vgFDR0M8nNmePJATuroani61TjNxbnSz09WDUZOYxLujxBH27tdYXiVv5JMGVp4ZkyhrRx-bf8_vEryq3HeqztHGrgtKDH7FJbeWvnI4CmNuxvU_AdEjhXyUADLdz-eO3tc8hje1R4kBWnfpX3Mxdj1ZLxo_bvDYrN1A
    UserInfoAndToken:
      title: User information and JWT
      description: Information about the logged-in user and the JSON web token
      properties:
        userInfo:
          allOf:
          - title: User
            description: A user
            allOf:
            - title: User fields
              description: "Editable fields of the user, used to update the user"
              type: object
              properties:
                username:
                  title: Username
                  description: Username of the user
                  type: string
                  minLength: 1
                  maxLength: 30
                  pattern: "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$"
                  example: john
                enabled:
                  title: User account status
                  description: Status of the user
                  type: boolean
                  example: true
                roles:
                  title: User roles
                  description: Roles of the user
                  type: string
                  example: admin user
              required:
              - username
              - enabled
              - roles
            - type: object
              properties:
                id:
                  title: Id
                  description: Id of the user
                  type: integer
                  minimum: 1
                  example: 1
                  readOnly: true
                password:
                  title: Password
                  description: Password of the user
                  type: string
                  minLength: 8
                  maxLength: 30
                  pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
                  example: ABCDEfghi123456*()
                  writeOnly: true
              required:
              - id
              - password
          example:
            id: 1
            username: john
            enabled: true
            roles: admin user
        token:
          type: string
          example: eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoiam9obiIsImV4cCI6MTY3NDc5NTc1MSwiaWF0IjoxNjc0NzA5MzUxLCJhdXRob3JpdGllcyI6ImFkbWluIHVzZXIifQ.ZaXHGocHD0-HtcmTdflOVaf2-FWUTE7y65VS-Tzli5gaIGKCEjbDCu2n-p10a0DqdunnJBwGnvMB1XGwPNL-6JWr5ECOVOGH8N3H_Wc1j3nItIX2P4voh0cegw1JNyJcGwdBCLdquGQtW2dLMCV_c4peSoQ8UwHdlvABxsBSuUVy7cyiF_vgFDR0M8nNmePJATuroani61TjNxbnSz09WDUZOYxLujxBH27tdYXiVv5JMGVp4ZkyhrRx-bf8_vEryq3HeqztHGrgtKDH7FJbeWvnI4CmNuxvU_AdEjhXyUADLdz-eO3tc8hje1R4kBWnfpX3Mxdj1ZLxo_bvDYrN1A
    ApiResponseArtifactBadRequest:
      title: API response for bad request error
      description: The schema for bad request error
      type: object
      properties:
        flag:
          title: flag
          description: Success or not
          type: boolean
          example: false
          readOnly: true
        code:
          title: Http status code
          description: Http status code
          type: integer
          example: 400
          readOnly: true
        message:
          title: Message
          description: The long error message
          type: string
          example: "Provided arguments are invalid, see data for details."
          readOnly: true
        data:
          title: Artifact bad request
          description: Messages describing a bad request error
          type: object
          properties:
            name:
              title: Name of the artifact
              description: The error message
              type: string
              example: name is required.
            description:
              title: Description of the artifact
              description: The error message
              type: string
              example: description is required.
            imageUrl:
              title: Image url of the artifact
              description: The error message
              type: string
              example: imageUrl is required.
    ArtifactBadRequest:
      title: Artifact bad request
      description: Messages describing a bad request error
      type: object
      properties:
        name:
          title: Name of the artifact
          description: The error message
          type: string
          example: name is required.
        description:
          title: Description of the artifact
          description: The error message
          type: string
          example: description is required.
        imageUrl:
          title: Image url of the artifact
          description: The error message
          type: string
          example: imageUrl is required.
    ApiResponseArtifactNotFound:
      title: API response for not found error
      description: The schema for bad request error
      type: object
      properties:
        flag:
          title: flag
          description: Success or not
          type: boolean
          example: false
          readOnly: true
        code:
          title: Http status code
          description: Http status code
          type: integer
          example: 404
          readOnly: true
        message:
          title: Message
          description: The long error message
          type: string
          example: Could not find artifact with Id 1250808601744904199 :(
          readOnly: true
        data:
          type: object
          example: null
    ApiResponseAPIKeyError:
      title: API response for API key error
      description: The schema for API key error
      type: object
      properties:
        flag:
          title: flag
          description: Success or not
          type: boolean
          readOnly: true
        code:
          title: Http status code
          description: Http status code
          type: integer
          readOnly: true
        message:
          title: Message
          description: The long error message
          type: string
          readOnly: true
        data:
          type: string
    ApiResponseQuotaExceeded:
      title: API response for quota exceeded
      description: The schema for quota exceeded error
      type: object
      properties:
        flag:
          title: flag
          description: Success or not
          type: boolean
          example: false
          readOnly: true
        code:
          title: Http status code
          description: Http status code
          type: integer
          example: 429
          readOnly: true
        message:
          title: Message
          description: The long error message
          type: string
          example: "A rest client error occurs, see data for details."
          readOnly: true
        data:
          type: string
          example: "You exceeded your current quota, please check your plan and billing details."
    ApiResponseOpenAIServerError:
      title: API response for OpenAI server error
      description: The schema for OpenAI server error
      type: object
      properties:
        flag:
          title: flag
          description: Success or not
          type: boolean
          example: false
          readOnly: true
        code:
          title: Http status code
          description: Http status code
          type: integer
          example: 500
          readOnly: true
        message:
          title: Message
          description: The long error message
          type: string
          example: "A rest client error occurs, see data for details."
          readOnly: true
        data:
          type: string
          example: The server had an error while processing your request.
    ApiResponseOpenAIServerOverloaded:
      title: API response for OpenAI server overloaded error
      description: The schema for OpenAI server overloaded error
      type: object
      properties:
        flag:
          title: flag
          description: Success or not
          type: boolean
          example: false
          readOnly: true
        code:
          title: Http status code
          description: Http status code
          type: integer
          example: 503
          readOnly: true
        message:
          title: Message
          description: The long error message
          type: string
          example: "A rest client error occurs, see data for details."
          readOnly: true
        data:
          type: string
          example: "The engine is currently overloaded, please try again later."
    ApiResponseWizardBadRequest:
      title: API response for bad request error
      description: The schema for bad request error
      type: object
      properties:
        flag:
          title: flag
          description: Success or not
          type: boolean
          example: false
          readOnly: true
        code:
          title: Http status code
          description: Http status code
          type: integer
          example: 400
          readOnly: true
        message:
          title: Message
          description: The long error message
          type: string
          example: "Provided arguments are invalid, see data for details."
          readOnly: true
        data:
          title: Wizard bad request
          description: Messages describing a bad request error
          type: object
          properties:
            name:
              title: Name of the wizard
              description: The error message
              type: string
              example: name is required.
    WizardBadRequest:
      title: Wizard bad request
      description: Messages describing a bad request error
      type: object
      properties:
        name:
          title: Name of the wizard
          description: The error message
          type: string
          example: name is required.
    ApiResponseWizardNotFound:
      title: API response for not found error
      description: The schema for bad request error
      type: object
      properties:
        flag:
          title: flag
          description: Success or not
          type: boolean
          example: false
          readOnly: true
        code:
          title: Http status code
          description: Http status code
          type: integer
          example: 404
          readOnly: true
        message:
          title: Message
          description: The long error message
          type: string
          example: Could not find wizard with Id 9 :(
          readOnly: true
        data:
          type: object
          example: null
    ApiResponseUserPostBadRequest:
      title: API response for bad request error
      description: The schema for bad request error
      type: object
      properties:
        flag:
          title: flag
          description: Success or not
          type: boolean
          example: false
          readOnly: true
        code:
          title: Http status code
          description: Http status code
          type: integer
          example: 400
          readOnly: true
        message:
          title: Message
          description: The long error message
          type: string
          example: "Provided arguments are invalid, see data for details."
          readOnly: true
        data:
          title: User Post bad request
          description: Messages describing a bad request error
          type: object
          properties:
            username:
              title: Username of the user
              description: The error message
              type: string
              example: username is required.
            password:
              title: User password
              description: The error message
              type: string
              example: password is required.
            roles:
              title: User roles
              description: The error message
              type: string
              example: roles are required.
    UserPostBadRequest:
      title: User Post bad request
      description: Messages describing a bad request error
      type: object
      properties:
        username:
          title: Username of the user
          description: The error message
          type: string
          example: username is required.
        password:
          title: User password
          description: The error message
          type: string
          example: password is required.
        roles:
          title: User roles
          description: The error message
          type: string
          example: roles are required.
    ApiResponseUserPutBadRequest:
      title: API response for bad request error
      description: The schema for bad request error
      type: object
      properties:
        flag:
          title: flag
          description: Success or not
          type: boolean
          example: false
          readOnly: true
        code:
          title: Http status code
          description: Http status code
          type: integer
          example: 400
          readOnly: true
        message:
          title: Message
          description: The long error message
          type: string
          example: "Provided arguments are invalid, see data for details."
          readOnly: true
        data:
          title: User Put bad request
          description: Messages describing a bad request error
          type: object
          properties:
            username:
              title: Username of the user
              description: The error message
              type: string
              example: username is required.
            roles:
              title: User roles
              description: The error message
              type: string
              example: roles are required.
    UserPutBadRequest:
      title: User Put bad request
      description: Messages describing a bad request error
      type: object
      properties:
        username:
          title: Username of the user
          description: The error message
          type: string
          example: username is required.
        roles:
          title: User roles
          description: The error message
          type: string
          example: roles are required.
    ApiResponseUserPasswordPatchBadRequest:
      title: API response for bad request error
      description: The schema for bad request error
      type: object
      properties:
        flag:
          title: flag
          description: Success or not
          type: boolean
          example: false
          readOnly: true
        code:
          title: Http status code
          description: Http status code
          type: integer
          example: 400
          readOnly: true
        message:
          title: Message
          description: The long error message
          type: string
          example: New password does not meet criteria.
          readOnly: true
        data:
          type: object
          example: null
    ApiResponseUserNotFound:
      title: API response for not found error
      description: The schema for bad request error
      type: object
      properties:
        flag:
          title: flag
          description: Success or not
          type: boolean
          example: false
          readOnly: true
        code:
          title: Http status code
          description: Http status code
          type: integer
          example: 404
          readOnly: true
        message:
          title: Message
          description: The long error message
          type: string
          example: Could not find user with Id 10 :(
          readOnly: true
        data:
          type: object
          example: null
    ApiResponseBadCredentials:
      title: API response for not found error
      description: The schema for bad request error
      type: object
      properties:
        flag:
          title: flag
          description: Success or not
          type: boolean
          example: false
          readOnly: true
        code:
          title: Http status code
          description: Http status code
          type: integer
          example: 401
          readOnly: true
        message:
          title: Message
          description: The long error message
          type: string
          example: username or password is incorrect.
          readOnly: true
        data:
          type: object
          example: Bad credentials
    ApiResponseChangeUserPassword:
      title: API response for change user password
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          description: Return code
          example: 200
        message:
          type: string
          example: Change Password Success
        data:
          type: object
          example: null
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- BearerAuth: []
